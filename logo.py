# Compile By BL4CK DR460N
import base64
exec(base64.b64decode('# Compile By BL4CK DR460N
import base64
exec(base64.b64decode('IyBDb21waWxlIEJ5IEJMNENLIERSNDYwTgppbXBvcnQgYmFzZTY0CmV4ZWMoYmFzZTY0LmI2NGRlY29kZSgnSXlCRGIyMXdhV3hsSUVKNUlFSk1ORU5MSUVSU05EWXdUZ3BwYlhCdmNuUWdZbUZ6WlRZMENtVjRaV01vWW1GelpUWTBMbUkyTkdSbFkyOWtaU2duU1hsQ1JHSXlNWGRoVjNoc1NVVktOVWxGU2sxT1JVNU1TVVZTVTA1RVdYZFVaM0J3WWxoQ2RtTnVVV2RaYlVaNldsUlpNRU50VmpSYVYwMXZXVzFHZWxwVVdUQk1iVWt5VGtkU2JGa3lPV3RhVTJkdVUxaHNRMUpIU1hsTldHUm9Wak5vYzFOVlZrdE9WV3hHVTJzeFQxSlZOVTFUVlZaVFZUQTFSVmRZWkZWYU0wSjNXV3hvUTJSdFRuVlZWMlJhWWxWYU5sZHNVbHBOUlU1MFZtcFNZVll3TVhaWFZ6RkhaV3h3VlZkVVFrMWlWV3Q1Vkd0a1UySkdhM2xQVjNSaFZUSmtkVmRXV21wbFIxRjVVMWh3VkdGclNrdFZibkJIWWpGcmVVNVZPV2xOVjNoWldrUkNNRmxXWkVoaFNFNVlWMGQ0ZGxwRlduTlhWazUxWTBkb1UwMUdjRFpXUldONFRrZFNjMkpHYUZaaWJrSk5WVlJLVTJOV1pFWmhSelZyVFVSR1NGcFZVbE5VYkVwR1UyMXdZVlpXU2tOYVJFWnZVMVp2ZWxwRk5WTmliV04zVmtaV1UxRXhhM2xXYTFaU1YwZFNXbFV3Wkd0Tk1WSldWMnBTVDFKVVJrWlZWekZQWWtaS1JsSnFXbGhTVjJoMVdrUkJlRkl5VmtWVmF6VlRVbFZ3Y1Zkc1ZsTlJiVkY0VW10a2JGSkdTazlWYTFaTFlXeHdWbFZyU210TlYyaEtWMnBPYTFSc1RrWk5WemxZVWxkb2RWcEVRWGhTTWxaRlZXczFVMUpWY0hGWGJGWlRVVzFSZUdORlpHeFNSa3BQVld0V1MyRnNjRlpWYTBwclRWaENTRnBWVWxOVWJFcEdWMjF3WVZaV1NrTmFSRXBMVWpKV1JWVnJOVk5TVlhCeFYyeFdVMUZ0VVhoYVNFNXNVa1pLVDFWclZrdGhiSEJXVld0S2EwMVlRbGhhVlZKVFZHeEtSbE50Y0dGV1ZrcERXa1JLUjJNeVZrVlZhelZUVWxad2NWZHNWbE5SYlZGNFkwVmtiRkpHU2s5VmExWjNZV3h3VmxWclNtdE5WMmhLVjI1d1UxUnJNVmxhZWtKVlZsWktTRmRVU2xkU1ZrWlpXa2RHVTJKdFkzZFdSbFpUVWpGcmVWWnJWbEpYUjFKYVZUQmthMDB4VW5KWGJHUm9UVmRvU2xkcVRtdFViRnAxV25wQ1ZWWldTa1JXYTFZd1VqSldSVlZyTlZOU1ZGWnhWMnhXVTFGdFVYaGhSV3hoVFRKU1QxVnROVzVOUmxKV1ZXdE9hbEp0YUVwWlZXTjRXVmRLU1ZwNlFsaGlWRVpvVjFSS1YxTkdaSFJOVm14VVVqSm9NRll5TVhwTlYxWnpZVVZzYUZJelFsQldiVFZ1VFVaU1ZsVnJPVnBOYkZwR1ZWWm9hMWRXVGtoYVJFNVZWbGRTVUZkVVNsZFNWa1paV2tac1ZGSXlVWHBXUmxaaFRrVTFSazFWVmxKaVZUVnpWV3RXUjAweFpFWmhSelZyVFVSR1NGcFZVbE5VYkVwR1UyMXdZVlpXU2tOYVJFWnZVMVp2ZWxwRk5WTmliV04zVmtaV1UxUXhhM2xXYTFaU1YwZFNXbFV3Wkd0Tk1WSldWMnBTVDFKVVJrWlZWM1JIVjFaT1NGcEVUbFZXVm04d1ZHdFZlRkpXUm5SVWJYaFRVbFZaZWxkVVRuTlNNV3Q1Vm10V1VsZEhVbHBWTUdSclRURlNWbGRxVWs5U1ZFWkdWVmN4TUZkV1RraGFSRTVWVmxadk1GUnJWWGhTVmtaMFpFWnNWRkl5VVhwV1JscGhUa1UxUmsxVlZsSmlhelZhVlRCa2EwMHhVbFpYYWxKUFVsUkdSbFZYTVVkWFZrNUlXa1JPVlZaV2J6QlVhMVY0VWxaR2RHVkdiRlJTTWxGNlZrWldZVTVGTlVaTlZWWlNZbXRhV2xVd1pHdE5NVkpYVjJwU1QxSlVSa1pWVnpFd1YxWk9TRnBFVGxWV00yY3dWR3RWZUZKV1JuUlViWGhUVWpKUk1sWXdWbTlpYlZGM1RWWmtiRkpHU2s5VmExWkxZMnhrUm1GSE5XdE5SRVpZV2xWU1UxUnNTa1pUYlhCaFZsWktRMVJWV21GWFJsWjBWRzE0VTFKVldUQldNRlp2WW0xUmQwMVZaRlZXZW14YVZUQmthMDB4VWxWU2FsSlBVbFJHUmxWWE1VOWlSa3BHVW1wT1dGSlhhSFZhUkVGNFUwZEtTRlJ0ZUZOTldFSXdWakJXYjJJeVNsZGpTRTVzVWtaS2FGbHNXbmRoYkhCV1drZEdhVlpzU2pGV1JsSlBWMVpPU0ZwRVRsVldSVmt3Vkd0VmVGSldSblJVYlhoVFVsVlplbFl4VWtkT1JUVkdUVlZXVW1KVk5YTlZhMVpIVFRGa1JtRkhOV3ROUkVaSVdsVlNVMVJzU2taVGJYQmhWbFpLUTFwRVJtOVRWbTk2V2tVMVUySnRZM2RXUmxaVFVURnJlVlpyVmxKWFIxSmFWVEJrYTAweFVsaGxSRkpQVWxSR1JsVlhNVTlpUmtwR1VtcE9XRkpYYUhWYVJFRjRVbXhHZEZSdGVGTlNWVmw2VmpCV2IySnRVWGROVldSc1VrWktUMVZyVmt0T2JHUkdZVWMxVDFaVVZraGFWVkpUVkd4S1JsTnRjR0ZXVmtwRFdrUkdiMU5XYjNwYVJUVlRUVlZ3Y1Zkc1ZsTlJiVkY0WVVWc1lVMHlVazlWYlRWRFlXeHdWbFZyU210TlYyaEtWMnBPYTFSc1NYaFRiWEJoVmxaS1ExcFZXbTlUVm05NldrVTFVMkpyU25GWGJGWlRVVzFXUjJGRmJHRk5NbEpQVldwR1MyRnNjRlpWYTBwc1ZtMW9TbGRxVG10VWJFcDFVVzF3WVZaV1NrTmFWbHB2VTFadmVscEZOVk5OVlhCeFYyeFdVMUZ0Vm5OaFJXeGhUVEpTVDFWdE5VTmhiSEJXVld0S2JHSkhhRXBYYWs1clZHeEplRk50Y0dGV1ZrcERWRlZhYjFOV2IzcGFSVFZUWW10S2NWZHNWbE5SYXpGSFlVVnNZVTB5VWs5VmFrWkxZV3h3VmxWclNrNVdiV2hLVjJwT2ExUnNTblZSYlhCaFZsWktRMVJXV205VFZtOTZXa1UxVTAxVmNIRlhiRlpUVVdzeGMyRkZiR0ZOTWxKUFZXMDFRMkZzY0ZaVmEwcE9Za2RvU2xkcVRtdFViRWw0VTIxd1lWWldTa05VVkVadlUxWnZlbHBGTlZOaWEwcHhWMnhXVTFGck1IaGhSV3hoVFRKU1QxVnFSa3RoYkhCV1ZXdEtiRlp0YUVwWGFrNXJWR3hLZFZGdGNHRldWa3BEVkd0YWIxTldiM3BhUlRWVFRWVndjVmRzVmxOUmF6VkhZVVZzWVUweVVrOVZiVFZEWVd4d1JsZHFVazlTVkVaR1ZWY3hNRmRXVGtoYVJFNVZZVEZ2TUZSclZYaFNWa1owVW14c1UyVnNXbkZYYkZaVFVXMVJlR05GWkd4U1JVcGFWVEJrYTAweFVsWlhibVJhVFd4YVJsVlhNWE5YVms1SVdrUk9WVlpYVWxSWFZFcFhVbFpHVlZOc2JGUlNNbEY2VmtaV1lXUXhhM2xXYTFaU1lsaENXbFV3Wkd0Tk1WSldXa1prV2sxc1drWlZWekZ6VjFaT1NGcEVUbFZXVjFKVVYxUktTMk15VmtWVmF6VlRVbFZ3Y1Zkc1ZsTlNhekI0WTBaa2JGSkZTbHBWTUdSclRURlNWbGRxVWs5U1ZFWldWMnRrTUZkV1RraGFSRTVZVmpObk1GUnJWWGhTVmtaMFZHMTRVMUpXVmpaV01uaGhUa1UxUmsxVmFGUmlWVFZ6Vld0V1IwMHhaRVpoUnpWc1VsUlNOVlpYTVU5aVJrcEdVMjVHV0ZKWGFIVmFSRUY0VWpKV1JWVnJOVmRTTVVwNlZqQldiMVV4YTNsV2ExWlNWMGRTV2xVd1pHdE9SbEp4VTJ4T1drMXJOWHBhVlZKVFZHeEtSbE50Y0dGV1ZrcEhWRlJHZDFZeVZrVlZhelZUVFVoQ2NWZHNWbE5SYlZGNFlVVnNZVTB5YUZCVVYzaExZV3h3VmxWclRtbFNiV2hLVjJwT2ExUnNTblZhZWtKVlZteEtjbGxyV205VFZsWjBWRzE0VTFKVldYcFdNRlp2WW0xV1JrNUliRlppVlRWelZXdFdTMlJHWkVaaFJ6VnJUVVJHU0ZwVlVsTlViRnBJVlcxb1dGSlhhRXhYVkVwWFVsWkdXVnBIUmxOaWJXTjNWa1phVTFFeGEzbFdhMVpTVjBkU1dsVXdaR3BOUmxKeVYycFNUMUpVUmtaVlZ6RlBZa1pLUmxKcVRsZE5ibWN3Vkd0VmVGTkdXblJVYlhoVFVsVlplbFl5ZUdGT1JUVkdUVlZvVjJKVk5YTlZhMVpIVFRGa1JtRkhOVTlTVkVJMFdsVlNVMVJzU2taVGJYQmhWbFpLUTFwRVJtOVRWbTk2V2tVMVYwMVZjSEZYYkZaVFVtMVdSMkZGYkdGTk1sSlBWVzF6ZUdSc1pFWmhSelZzVWxSR2VscFZVbE5VYkVwR1UyMXdZVlpXU2tOYVJFWnZVMVp2ZWxwRk5WUlNWRlp4VjJ4V1UxRnJNSGhoUld4aFRUSlNUMVZ0Tlc1TlJsSldWV3RPV2sxc1drWlZWbWhyVjFaT1NGcEVVbGhXTTJnMlZHeFZNV05YVFhwaFIyeFlVbFJXY1Zkc1ZsTlJhekI0WVVWc1lVMHlVazlWYlRWdVRVWlNWbFZyVGxwTmJGcEdWVlpvYTFkV1RraGFSRkpZVmpOb05scFhjekZTVjAxNllVZHNXRkpVVm5GWGJGWlRVV3N3ZUdGRmJHRk5NbEpQVlcwMWJrMUdVbFpWYTA1YVRXeGFSbFZXYUd0WFZrNUlXa1JTV0ZZemFEWmFWM040VG0xTmVtRkhiRmhTVkZaeFYyeFdVMUZyTUhoaFJXeGhUVEpTVDFWdE5XNU5SbEpXVld0T1drMXNXa1pWVm1oclYxWk9TRnBFVWxoV00yZzJXbGR6ZUdOWFRYcGhSMnhZVWxSV2NWZHNWbE5SYXpGellVVnNZVTB5VWs5VmJUVnVUVVpTVmxWclRscE5iRnBHVlZab2ExZFdUa2hhUkZKWVZqTm9ObHBFUVRWT2JFcDFWVzF3VGxkSFkzZFdSbFpUWVRGcmVWWnJWbEpYUjFKYVZUQmthMDB4VWxaWGFsSlBVbFJHUmxWWE1VOWlSa3BHVjI1Q1YwMHpRazlhVlZVMVRteEtkVlZ0Y0U1WFIyTjNWa1pXVTJFeGEzbFdhMVpTVjBkU1dsVXdaR3ROTVZKV1YycFNUMUpVUmtaVlZ6RlBZa1pLUmxkdVFsZE5NMEpQVkZkek5VNXNTblZWYlhCT1YwZGpkMVpHVmxOV01XdDVWbXRXVWxkSFVscFZNR1JyVFRGU1ZsZHFVazlTVkVaR1ZWY3hUMkpHU2taWGJrSlhUVE5DVDFSVlpFdFhWbEowVkcxNFUxSlZWalJXTUZadlltMVJkMDFWWkd4U1JrcFBWV3RXUzJGc2NGWlZhMHByVFZkb1NsZHFUbTlYYlVwSlZHcGFWVlo2UWpSYVYzaHZVMVp2ZWxwRk9WZGliV04zVmtaV1UxRXhhM2xXYTFaU1YwZFNXbFV3Wkd0Tk1WSldWMnBTVDFKVVJsbFZNakZMVkcxV2NsZHFRbHBOTTBKeVYxUktWMUpXUmxsYVJteFVVakpSZWxaR1ZtRk9SVFZHVFZWV1VtSlZOWEJaYTJodVRVWmtjMVZyZEZwTmJGcEdXVmh3UjFkV1RraGhSemxWWWxkNFJGZFVTbGRUUmxwWllrWnNWRkl5VFhoV1IzaGhUa1UxUjJKR1ZsaGlWVFZ6VldwR1YwNVdaRVpoUnpWUFZsUldTRnBWVWxOVlJrbDNUbGR3WVZaWFVsZGFWbHB2VTFad05sWnJPVk5pYldOM1ZrUkdVMUV4YTNsV2EyaFhWMGQ0V2xVd1pHcE5WbEp5VjJwU1QxSlViRWxXUm1SclUyeEtkVnA2UWxoaVJrcE1WMVJLVjFKWFJqWlNiR3hVVWpKTmVGWkhkR0ZPUlRWSFkwWldWR0pWTlhOVmEyUjZaVVprUm1GSE5VOVdWRVpJV2xWU1UxbFdXa1pqUjNCaFZsWktlVlJXV205VFZuQTJWbXM1VGxkSFkzZFdNbmhUVXpGcmVWWnJWbWhsYTBwYVZUQmtiMkl4WkZsaVJVNWFUV3hhU1Zac2FITlhWazVJV1hwR1ZXRXhiekJVYTFwelYwWlNkRlJ0ZUZOTlZsa3hWakJXYjJKck5WWk9WV1JzVWtaS1VWVnFRVEZoYkhCV1drWmFiRlp0YUVwWGJuQlhWREZLZFZwNlFsVk5Sa3BFVjFSS1YxTkdXbGxpUm14VVVqSk5lRlpIZEdGT1JUVkdUMVpXVW1KVk5YTlZha1pYVGxaa1JtRkhOVTlXVkZaSVdsVlNVMWRzV1hkTlZ6VlVWbFp2TUZSclduZFdWazUwVkcxNFUxSXpUak5XTUZadllqSkdSMkpFVmxKV01sSkxWVEJWTVdGc2NGWlZhMXBPVFZkb1NsZHFUbXRVYkVwMVducENWVlpXU2tSWFZFcFhVbFpHV1ZwRmNGTldWbXcwVjJ0V2EySXlVblJVYmtKU1ZqSlNVVmxXVmt0U1JscEdWV3hPVTFKck5ERlZWM1JYVm0xR2MxSlliRlZXVmxWNFdsZHpOVll5VmtWVmF6VlRVbFZ3Y1Zkc1ZsTlJiVkY0WVVWc1lVMHlVazlWYlRWdlRWWmtSbUZIT1dsU1ZFWjZXbFZTVTFWR1drZFhiWEJoVmxaS2VWcFZWbk5TTWxaRlZXMUdWMUpZUW5GWGJGWlRZMnN4VjJGRmJHRmxiRnBQVm0wMWJrMUdaSE5WYTNSYVRXeGFSbGxZY0VOWFZrNUlXWHBDVlZZelp6QlVhMXAzVmxaT2RGUnRlRk5TTTA0elZqQldiMkpyTlVaTldFNXNVa1pLYUZaclZuZGhiSEJXVlc1S1RsSnRhRXBYYm5CVFZHMUdWbEp0TlZoU1YyaDJXV3RWZUdNeVZrVlZiRUpYVW14d2NWZHNWbE5qTWtaSFlVVnNhRkl6YUU5WmEyaHVUVVpSZUZWc1pGcE5iRnBHV1ZST2ExZFdUa2hoU0U1VlZqTm5NRlJyVlRWV1ZscDBWRzE0VTFJelRqWldNRlp2WWpKS1JrMVlUbXhTUmtwUlZtdGFTMkZzY0ZaVmJrNW9Za2RvU2xsVlpEUlViVXBKV25wQ1ZVMVdTbFJYVkVwWFVsWnZlbHBHYkZSU01taDZWa1prTkU1Rk5VWlBWbFpXWWxVMWMxVnFRbFprTVdSR1lVYzVhVkpVUm5wYVZWSlRWVVphUjFOdGNHRldWa3A2V1ZkNGIxTlhSa2hsUlRWcFUwZGpkMVpFUmxOVk1XdDVWbXRXWVUweVVscFZNR1J2WXpGU1dHVkVVazlTVkd4V1ZsY3hUMkpHU1hkV1dHUllVbGRvZGxsclZYaGpNbFpGVld4Q1YxSnJjSEZYYkZaVFltMVdWbUpGVWxKaVZUVnpWV3BHVjA1V1pFWmhSelZQVmxSV1NGcFZVbE5WUmtwR1lrYzFWRlpWTlVSYVYzaHZVMVp2ZWxwSFJtbFRSMk4zVmtaV1UxRXhhM2xXYTFaU1YwZFNXbFV3Wkd0Tk1WSldWR3RPVjAxWVFscFZNalYzWVVaYU5tSkVSbFJXVmtveVYycEdSMk5zV25OV2JFcFlVbFJDTWxZd1ZtOWliVkYzVFZWa2JGSkdTazlWYTFaTFlXeHdWbFZyU210TlYyaEpWR3hrVDJKR1NYaFdhbFpZVWxkb2RWUnNWVEZXTWxaRlZXeENWMDFHY0hGWGJGWnJWbTFXVjJGRmJHRmxiRnBRVm0wMWJrMUdVWGhWYTA1YVRXeGFTVlpzYUhOWFZrNUlXWHBHVldKR2J6QlVhMVUxVjBaV2RGUnRlRk5OVmxreFZqQldiMkpyTlZaT1ZXUnNVa1pLVVZaclpHOWhiSEJXV2taYWJGWnRhRXBYYm5CWFZERktkVnA2UWxWTlZrcFVWMVJLVjFOR1dsbGlSbXhVVWpKTmVGWkhkR0ZPUlRWR1QxWldZVTF0VWt0VmJUVnVUVVprYzFWcmRGcE5iRnBHV1Zod1IxZFdUa2haZWtaWVZteHZNRlJyV25kV1ZrNTBWRzE0VTFJelRqUldNRlp2WW1zMVZrMVZaR3hTUmtwb1ZtdFdkMkZzY0ZaVmJrcE9WbTFvU2xkdWNGZFpWa3AxV25wQ1dHSkdTa3hYVkVwWFVsZEdObEZzYkZSU01taDNWa2QwVDFFeGEzbFdhMmhYVjBkNFdsVXdaR3BOVmxKeVYycFNUMUp0ZUhoV1Z6RlBZa1pKZUZacVZsaFNWMmgxVkd4Vk1WSXlWa1ZWYkhCb1lrVmFkVll3Vm05aU1rcEdUVmhPYkZKR1NsRldhMXBMWVd4d1ZscEZjRTVTYldoS1dWVmtORlJ0U2tsYWVrSlZUVlpLVkZkVVNsZFRSazVWVVd4c1ZGSXlhSHBXUm1RMFRrVTFSazlXVmxaaVZUVnpWV3RrYTAweFpFWmhSemxwVWxSR2VscFZVbE5WUmxwSFUyMXdZVlpXU25sVWExcHZVMWRHU0dWRk5XbFRSMk4zVmtSR1UxVXhhM2xXYTJoVVZrVktXbFV3Wkc5ak1WSllaVVJTVDFKVWJGWldWekZQWWtaS1NGcEVUbGhTVjJoMldXdFZlR015VmtWVmJFSlhVbXR3Y1Zkc1ZsTmphelZHWWtWc1ZXSlZOWE5WYTFaaFlqRmtSbUZITld0TlJFWklXbFZTVTFSc1NrWlRiWEJoVmxaS1ExcEVRbk5TTVZaMFpVWndWMlZyU25WVk1WWlBVV3h2ZDA5WVFsSmlSMmh3VkZjMWIyVnNUbFpXYXpsUFZtMTRNRlp0TlhOVGJFcHpVMjVPV0ZadFRqUlpWM2h2VTFadmVscEZOVk5pYldOM1ZrWldVMUV4YTNsV2ExWlNWMGRTV2xVd1pHdE5NVkpXVjJwU1QxSlVSa1pWVnpGUFlrWktSbEpxVGxoU1YyaDFXa1JCZUZJeVZrVlZhelZUVWxWd2NWZHNWbE5SYlZaSFlVVnNZVTB5VWs5VmJUVnVUVVpTVmxWclRscE5iRnBHVlZab2ExVnJNVmxhZWtKVlZsWktSRmRVU2xkU1ZrWlpXa1pzVkZJeVVYcFdSbFp2VkRGcmVWVnJaR3hTUmtwUFZXdFdTMkZzY0ZaVmEwcHJUVmRvU2xkcVRtdFViRTVIVTIxd1lWWldTa05hUkVadlUxWnZlbHBGTlZOV01VcExWakowWVU1Rk5VWk5WVlpTWWxVMWMxVnJWa2ROTVZwWllrYzVXazFzV2taVlZtaHZWMVpPU0ZwRVRsVldWbTh3Vkd0VmVGSldSblJVYlhoVFVsVlplbFpyWkhOaU1XdDVWbXRXVWxkSGFGcFZNR1JyVFRGU1ZsZHFVazlTVkVaR1ZWY3hUMkpHU2taU2FrNWhVbFp2TUZSclZYaFNWbFowVkcxNFUxSlZXWHBXTUZadlltMVJkMDFWWkd4U1JrcFBWV3RXUzJWc2JIRlRiWFJyWVROU1NGcFZVbE5VYkVwR1UyMXdZVlpXU2tOYVJFWnZVMVp2ZWxwRk5WTmliV04zVmtaV1UxRnRTWGhoUld4aFRUSlNUMVZ0Tlc1TlJsSldWV3RPV2sxc1drWlZWbWhyVjFaT1NGcEVUbFZXVlRWMlYxUktWMUpXUmxsYVJteFVVakpSZWxaR1ZtRk9SVFZHVFZWV1VtSlZOWE5WYTFaSFRURndSbGRxVWs5U1ZFWkdWVmN4VDJKR1NrWlNhazVZVWxkb2RWcEVRWGhTTWxaRlZXczFVMUpWYkROV01GWnZZbTFSZDA1WVRteFNSa3BQVld0V1MyRnNjRlpWYTBwclRWZG9TbGRxVG10VWJFbDNZMGM1V21KVVFYaFphMlJQWXpKV1JWVnJOVmRTV0VKeFYyeFdVMUZ0VVhoaFJXeGhUVEpTVDFWdE5XNU5SbEpXVld0T2JHSkhhRXBYYWs1clZHMUtTVnA2UWxWV1ZrcEVWMVJLVjFKV1JsbGFSbXhVVWpKUmVsWkdWbUZPUlRWR1RWVldVbUpWTlhOVmExWkhUa1phU0dKSE9WcE5iRnBHVlZjd2VGZFdUa2hhUkU1VlZsWnZNRlJyVlhoU1ZrWjBWRzE0VTFKVldYcFhhMVpoVGtVMVJrMVZWbFJpVlRWelZXdFdSMDB4WkVaaFJ6VnJUVVJHU0ZwVlVsTlViRXBHVTJ0c1YxSlhhRlJYVkVwWFVsWkdXV0pHYkZSU01sRjZWa1pXWVU1Rk5VWk5WVlpTWWxVMWMxVnJWa2ROTVZaWVpFVjBUbEp0YUVwWGFrNXJWRzFLU1ZwNlFsVldWa3BFVjFSS1YxSldSbGxhUm14VVVqSlJlbFpHVm1Gak1XUjBWV3RrYkZKR1NrOVZhMVozWVd4d1ZsVnJTbXROVjJoS1YycE9hMVJzU25WYWVrSlZWbFpLUkZVd1drcGxiRlowVkcxNFUxSlZXVEZXTUZadlltMVJkMDFWWkd4U1JrcFBWV3RXUzJGc2NGWlZhMHByVFZac05GZHJVa05YVms1SVdrUk9WVll6WnpCVWExVjRVbFpHZEZSdGVGTlNWVmw2VmpCV2IySnRVWGROVldSVVlrVTFjbFZ0Tlc1TlJsSldWV3QwV2sxc1drWlZWbWhyVjFaT1NGcEVUbFZXVm04d1ZHdFZlRkpXUm5KVmJFcE9UVlZ3Y1Zkc1ZsTlJiVlpIWVVWc1lVMHlVazlWYlRWdVRVWlNWbFZyVGxwTmJGcEdWVlpvYTFWdFNuTlRiWEJoVmxaS1ExcFZXbTlUVm05NldrVTFVMkp0WTNkV1JsWlRVVEZyZVZaclZsSlhSMUpaVmpCYVMyRnNjRlpWYTBwc1VtMW9TbGRxVG10VWJFcDFXbnBDVlZaV1NrUlhWRXBYVWxaR1dWcEdUazVOVlhCeFYyeFdVMUZ0VmtkaFJXeGhUVEpTVDFWdE5XNU5SbEpXVld0T1drMXNXa1pWVm1oclZqQXdlRk50Y0dGV1ZrcERXbFZhYjFOV2IzcGFSVFZUWW0xamQxWkdWbE5STVd0NVZtdFdVbGRIVWxkWmJYaExZV3h3VmxWclNteFNiV2hLVjJwT2ExUnNTblZhZWtKVlZsWktSRmRVU2xkU1ZrWlpXa1pLVGxaWVFuRlhiRlpUVVcxUmVHRkZiR0ZOTWxKUFZXMDFiazFHVWxaVmEwNWFUV3hhUmxWV2FHdFdiVXBKV25wQ1ZWWldTa3hYVkVwWFVsWkdXVnBHYkZSU01sRjZWa1pXWVU1Rk5VWk5WVlpTVm5wc1dsVXdaR3ROTVZKV1YycFNUMUpVUmtaVlZ6RlBZa1pLUmxKcVRsaFNWMmgxV2tSQmVGSkhSa2hVYlhoVFVsVlplbFl3Vm05aWJWRjNUVlZrYkZKR1NrOVZhMVpMWVd4d1ZsVnJTbXROU0ZKSVdsVlNVMVJzU2taVGJYQmhWbFpLUTFwRVJtOVRWbTk2V2tVMVUySnRZM2RXUmxaVFVURlZlR0ZGYkdGTk1sSlBWbTAxYmsxR1VsWlZhMDVhVFd4YVJsVldhR3RYVms1SVdrUk9WVlpYYUZSWFZFcFhVbFpHVlZWc2JGUlNNbEY2VmtaV1lVNUZOVVpOVlZaU1lsVTFjMVZyVmtkTk1WWkdXVE5vYTJKSVFrcFdiVFZQV1ZaYVJWWnRjR0ZXVmtwRFdsVmFiMU5XYjNwYVJUVlRZbTFqZDFaR1ZsTlJNV3Q1Vm10V1VsZEhVbkZVVm1odVRVWlNWMXBHWkZwTmJGcEdWVlpvYTFkV1RraGFSRTVWVmxadk1GUnJWWGhTVmtaMFZHMTRVMUpWVmpWV01GWnZZbTFSZDAxV1pHeFNSa3BQVld0YWQyRnNjRlpWYTBwc1VtMW9TbGRxVG10VU1rcEpXbnBDVlZaV1NraFhWRXBYVWxaR1ZWTnNiRlJTTWxGNlZrWmFZVTVGTlVaTlZWWllZbFUxYzFWclZrZE9SbVJHWVVjMWEwMUVWbnBhVlZKVFZHeEtSbGR0Y0dGV1ZrcERWRmQ0YjFOV2IzcGFSVFZYWW0xamQxWkdWbE5aVm10NVZtdFdVbGRIYUZwVk1HUnJUVEZTZEdWRVVrOVNWRVpHVlcweFQySkdTa1pTV0d4WVVsZG9kVnBFUVhoV01sWkZWV3MxVTFKdVFuRlhiRlpUVVcxV1IyRkZiR0ZOTWxKUVdXdG9iazFHVWxaVmEyUmFUV3hhUmxWV1VrdFhWazVJV2tST1ZXRXhTa3hYVkVwWFVsWkdXV0ZHYkZSU2EzQnhWMnhXVTFGdFZuSmtSV1JzVWtaS1QxVnJWbmRoYkhCV1ZXdEthMDFYYUVwWGFrNXJWR3hLZFZwNlFsVldWa3BFVkZWYWIxTldiM3BhUlRsT1YwZGpkMVpHVmxOUk1XdDVWbXRXVWxkSFVscFZNR1JyVFRGU1Zsa3phR2hTTURVeFZrY3dOVmRzV1hwYU0yUllVbGRvZFZwRVFURldNbFpGVldzMVUxSlZjSEZYYkZaVFVXMVJlR0ZGYkdGTk1sSlBWV3BPYjAxc1pGZGFSazVzWVROU1NGcFZVbE5VYkVwR1UyMXdZVlpXU2tOYVJFWnZVMVp2ZWxwRk5WTmliV04zVmtaV1UxRnRTWGhoUld4aFRUSlNUMVZ0Tlc1TlJsSldWV3RPV2sxc1drWlZWbWhyVjFaT1NGcEVUbFZXVlRWMlYxUktWMUpXUmxsYVJteFVVakpSZWxaR1ZtRk9SVFZHVFZWV1VtSlZOWE5WYTFaSFRURndSbGRxVWs5U1ZFWkdWVmN4VDJKR1NrWlNhazVZVWxkb2RWcEVRWGhTTWxaRlZXczFVMUpWYkROV01GWnZZbTFSZDA5VlpHeFNSa3BQVld0V1MyRnNjRlpWYTBwclRWZG9TbGRxVG10VWJFcEpZVVJDV21GcmNGUlVWbVJMVTBaYVZHUkdiRlJTTWxGNlZrWmFZVTVGTlVaTlZWWlNZbFUxYzFWclZrZE5NV1JHWVVjMWEwMUVSa3BXUnpGUFlrWktSbEpxVmxoU1YyaDFXa1JCZUZJeVZrVlZhelZUVWxWd2NWZHNWbE5SYlZGNFlVVnNZVTB5VW1GVVZtaHVUVVpTVmxWcldtbE5WMmhLVjJwT2ExUnRTa2xhZWtKVlZsWktSRmRVU2xkU1ZrWlpXa1pzVkZJeVVYcFdSbFp2VlRGcmVWWnJWbEpXUlRWYVZUQmthMDB4VWxaWGFsSlBVbFJHUmxWWE1VOWlSa3BHVW1wT1dtSkhVa2hhVm1ST1pWZEdTR0ZIYkZSU2EzQnhWMnhXVTFGck1WZGhSV3hoVFRKU1QxVnROVzVOUmxKV1ZXdE9XazFzV2taVlZtaHJZVlpLTm1KSE9WaGhNbWhQV1dwR2IxTldiM3BhUlRWVFltMWpkMVpHVmxOUk1XdDVWbXRXVWxkSFVscFZNR1JyVFRGU1ZsUnRPVnBOYkZwR1ZWWm9hMWRXVGtoYVJFNVZWbFp2TUZSclZYaFNWa1owVkcxNFUxSlZXWHBWZWtKaFRrVTFSazFWVmxKaVZUVnpWV3RXUjAweFpFWmhSelZyVFVSR1NGcFZVbE5VYkVwR1UxaGtXRkpYYUhWYVJFRjRVakpXUlZWck5WTlNWWEJ4VjJ4V1UxRnRVWGhoUld4aFRUSlNUMVV3V2t0aGJIQldWV3RLVDFKdGFFcFhhazVyVkd4S2RWcDZRbFZXVmtwRVYxUktWMUpXUmxsYVJrWlRaV3RaZVZZeWRHOVdNazE0WTBaV1QxWXdOWE5WYTFaSFRrWmtSbUZITld0TlJFWklXbFZTVTFSc1NrWlRiWEJoVmxaS1ExcEVTazVsUjFaRlZXczFVMUpZUW5GWGJGWlRVVzFSZUdGRmJHRk5NbEpQVlcwMWJrMUdVbFpWYTA1YVRXeGFSbFZYTVhkWFZrNUlXa1JPVlZack5YRlpNRll3Vld4Q1ZVMUhOVXhWTW5NNVNubHJjQ2NwS1E9PScpKQ=='))'))